const EnglishScript = {
  common: {
    remain: 'Remain',
    slogan: 'REACH FURTHER',
    view: 'View',
    createAtFrom: 'Created from',
    createAtTo: 'Created to',
    complete: 'Complete',
    language: 'Language',
    en: 'English',
    vi: 'Vietnamese',
    appName: 'VNA',
    save: 'Save',
    progressFeature: 'Feature is in progress!',
    close: 'Close',
    confirm: 'Confirm',
    create: 'Create',
    logout: 'Do you want to logout?',
    modify: 'Modify',
    delete: 'Delete',
    deleteAll: 'Delete all',
    remove: 'Remove',
    result: 'Results',
    sort: 'Sort',
    availableCreditLimit: 'Available credit limit',
    under: 'under',
    hrs: 'hrs',
    day: 'day',
    deleteSpecific: (name: String) => `Delete ${name}`,
    edit: 'Edit',
    change: 'Change',
    search: 'Search',
    select: 'Select',
    clear: 'Clear',
    latest: 'Latest',
    oldest: 'Oldest',
    detail: 'Detail',
    type: 'Type',
    freeOfChange: 'Free of change',
    notAllow: 'Not Allow',
    chargeable: 'Chargeable',
    filterMore: 'Filter more',
    changeStatus: 'Change status',
    deleteMarket: 'Delete market',
    deleteAgent: 'Delete agent',
    updateFilter: 'Update filter',
    descChangeStatus: 'Do you want to change status?',
    gobackHome: 'Go back home',
    next: 'Next',
    back: 'Back',
    continue: 'Continue',
    reset: 'Reset',
    update: 'Update',
    loadMore: 'Load more',
    loadLess: 'Show less',
    showing: 'Showing',
    of: 'of',
    elements: 'elements',
    notification: 'Notification',
    no: 'No',
    yes: 'Yes',
    cancel: 'Cancel',
    send: 'Send',
    add: 'Add',
    addNew: 'Add new',
    organizationType: 'Organization Type',
    organizationNumber: 'Organization Number',
    operatedBy: 'Operated By',
    export: {
      _: 'Export',
      all: 'All',
      currentPage: 'CurrentPage',
      currentSelect: 'Selection',
    },
    notify: {
      warningDelete: (name: string) => `Are you sure to delete this ${name}?`,
      warningChangeStatus: (name: string) => `Are you sure to change the status of this ${name}?`,
      createSuccess: (name: string) => `Create ${name} successfully`,
      createFail: (name: string) => `Create ${name} fail, please try later`,
      deleteSuccess: (name: string) => `Delete ${name} successfully`,
      deleteFail: (name: string) => `Delete ${name} fail, please try later`,
      editSuccess: (name: string) => `Edit ${name} successfully`,
      editFail: (name: string) => `Edit ${name} fail, please try later`,
      changeStatusSuccess: 'Change status successfully',
      changeStatusFail: 'Change status fail',
      resetPassSuccess: 'Reset password successfully',
      blockDes: 'Account has been blocked, please contact admin to change password!',
      blockTitle: 'Account has been blocked!',
      resetPassFail: 'Reset password failed',
      discard: 'Discard all the content?',
      forceBack: 'All the fields will not be saved. You will be taken back to the previous page.',
      priceChanged: 'The price of the flight has changed!',
      priceChangedDetail: (priceBefore: string, priceAfter: string) =>
        `Total price has been updated from ${priceBefore} to ${priceAfter}. Please check the price check price details before you proceed.`,
      expiring: 'Your session is about to expire',
      expiringDetail: 'To prevent it from expiring, click the button below',
      expired: 'Your session has expired',
      expiredDetail: 'To start over, click the button bellow',
      resendEmailSuccessfully: 'Resend email successfully',
      exit: 'Do you sure you want to exit? Your data will be lost.',
      submitFail: 'Something went wrong',
      submitFailDetail:
        'There may be an issue with your request. Please try again or contact our support if you need a hand',
      messagePRNSuccess: (action: 'add' | 'update' | 'delete', type: 'OSI' | 'RM' | 'SK' | 'VIP') => {
        let actionText = '',
          typeText = '';
        switch (action) {
          case 'add':
            actionText = 'Add';
            break;
          case 'update':
            actionText = 'Update';
            break;
          case 'delete':
            actionText = 'Delete';
            break;
          default:
            break;
        }

        switch (type) {
          case 'OSI':
            typeText = 'OSI';
            break;
          case 'RM':
            typeText = 'Remark';
            break;
          case 'SK':
            typeText = 'Special keyword';
            break;
          case 'VIP':
            typeText = 'Vip information';
            break;

          default:
            break;
        }

        return `${actionText} ${typeText} successfully`;
      },
      paymentErr: 'Payment Error',
      noAclPayment: 'No acl account found from ACL system',
      notActiveAcl: 'Acl account is not active',
      notEnoughBalance: 'Acl balance not enough to payment',
    },
    form: {
      require: "You haven't filled out all mandatory fields",
      minChar: 'Must be equal or more than 8 characters',
      minAmountChar: (amount: number) => `Must be equal or more than ${amount} characters`,
      maxAmountChar: (amount: number) => `Must be less than ${amount} characters`,
      invalidPhone: 'Phone number format is invalid!',
      invalidEmail: 'Email format is invalid',
      duplicateEmail: 'This email already exists.',
      emptyDocument: 'You have not choose document to send email!',
      invalidLength: 'Invalid length!',
      invalidAmount: 'Invalid amount!',
      invalidBirth: 'Invalid birth!',
      invalidAddress: 'Invalid address!',
      numberAlphaCharAllow: 'Must be 3-100 characters.',
      charMax20: 'Must be 1-20 characters!',
      alphaOnlyMax50: 'Must be 3-50 characters!',
      rangeNumberErrorMsg: (min: number, max: number) => `Must be ${min}-${max} numbers!`,
      specialAndRangeErrorMsg: (min: number, max: number) =>
        `Must be ${min}-${max} characters & not contains special characters`,
      rangeAllow: 'Must be larger than 200 and less than 6000',
      startDateAfterEndDate: 'Start date must be before end date',
      endDateBeforeStartDate: 'End date must be after start date',
      confirmPass: 'Please confirm your password!',
      numberOnlycharMax20: 'Must be numbers 1-20 characters!',
      messDontMatch: 'The two passwords that you entered do not match!',
      requirePass: 'Please input your password!',
      maxNumberErrorMsg: (max: number) => `Must be under ${max}`,
      characterNotMustNumber: `Character contains no number`,
      characterMustNumber: `Character must be number`,
      characterMustEng: `Character must be English`,
      rangeErrorMsg: (min: number, max: number) => `Must be ${min}-${max} characters!`,
      specialCharacterError: `Not contains special characters`,
      phoneRule: 'From 1-16 number, not start with 0',
      emailAddress: 'Email address',
      searchNotFound: 'Search not found',
      rangeDate: 'Date of birth is invalid according to the age rules',
      invalidLastName: 'Last name contains invalid characters',
      invalidFirstNam: 'First name contains invalid characters',
      greaterThanZero: 'Please enter number greater than 0',
    },
    showElements: (page: number, total: number) => `Showing ${page} of ${total} elements`,
    tabClose: {
      currentTab: 'Close current tab',
      otherTab: 'Close other tab',
      allTab: 'Close all tab',
    },
    createAt: 'Create at',
    createBy: 'Create by',
    updateAt: 'Update at',
    updateAtFrom: 'Update at from',
    updateAtTo: 'Update at to',
    updateBy: 'Update by',
    createdAt: 'Created at',
    createdBy: 'Created by',
    updatedAt: 'Updated at',
    updatedAtFrom: 'Updated at from',
    updatedAtTo: 'Updated at to',
    updatedBy: 'Updated by',
    action: 'Action',
    status: 'Status',
    orgStatus: 'Organization status',
    active: 'Active',
    deActive: 'Deactive',
    show: 'show',
    hide: 'hide',
    history: 'History',
    startDate: 'Start date',
    endDate: 'End date',
    listFilter: 'List filter',
    deleteFilter: 'Delete filter',
    selectAll: 'Select All',
    all: 'All',
    notHaveActiveMarket: 'Not have active Market',
    loading: 'Loading...',
    byClickingOn: 'By clicking on',
    showLess: 'Show less',
    startOver: 'Start over',
  },
  menu: {
    header: {
      Points: 'Points',
      AccountBalance: 'Account Balance',
      AccountInfo: 'Account Info',
      AvailableBalance: 'Available Balance',
      ChangePass: 'Change Password',
      Logout: 'Logout',
    },
    home: 'Home',
    profile: 'Profile',
    booking: 'Booking',
    advanceUser: 'Standard window ARDW-AIDL',
    term: 'GDPR and Conditions of carriage',
    userGuide: 'User Guide',
    addOnService: 'Add-on Service',
    topUp: 'Top-up',
    bookingManagement: 'Booking management',
    pointManagement: 'Point management',
    report: 'Report',
    reports: 'Reports',
    configTimezone: 'Config timezone',
    corporateAccount: 'Corporate account',
    fundsTransfer: 'Funds transfer',
    userReport: 'User report',
    agentManagement: 'Agent management',
    agentUserManagement: 'Agent user management',
    agentUserCreation: 'Create Agent user',
    agentUserUpdate: 'Update Agent user',
    agentUserDetail: 'Agent user detail',
    CAUserManagement: 'CA user management',
    CAUserCreation: 'Create CA user',
    CAUserUpdate: 'Update CA User',
    CAUserDetail: 'CA User Detail',
    subAgentManagement: 'Sub agent management',
    subAgentCreate: 'Create Sub agent',
    subAgentDetail: 'Sub agent Information',
    subAgentUpdate: 'Edit Sub agent',
    agentCreation: 'Create Agent',
    agentUpdation: 'Edit Agent',
    agentDetail: 'Agent Information',
    gsaManagement: 'GSA Management',
    gsaUserManagement: 'GSA user management',
    gsaCreate: 'Create GSA',
    gsaUserCreate: 'Create GSA User',
    gsaDetail: 'GSA Detail',
    gsaUpdate: 'Update GSA',
    news: 'News',
    newsManagement: 'News management',
    articleManagement: 'Article management',
    categoryManagement: 'Catalogue management',
    createNews: 'Create News',
    updateNews: 'Update News',
    category: 'Category',
    article: 'Article',
    userManagement: 'User management',
    userCreate: 'Create User',
    userUpdate: 'Edit User',
    userDetail: 'User Information',
    systemManagement: 'System management',
    caManagement: 'CA management',
    subCAManagement: 'Sub CA management',
    subCACreation: 'Create Sub CA',
    subCAUpdation: 'Update Sub CA',
    subCADetail: 'Detail Sub CA',
    caCreation: 'Create CA',
    caUpdation: 'Edit CA',
    caDetail: 'CA Information',
    administrativeReport: 'Administrative report',
    operationalReport: 'Operational report',
    topUpManagement: 'Top-up management',
    agent: 'Agent',
    roleManagement: 'Role management',
    roleCreate: 'Create Role',
    roleUpdate: 'Edit Role',
    roleDetail: 'Role Information',
    listPermission: 'List Permission',
    marketManagement: 'Market Management',
    marketCreation: 'Market Creation',
    marketUpdate: 'Edit Market',
    marketDetail: 'Market Detail',
    changePassword: {
      _: 'Change password',
      currentPassword: 'Current password',
      newPassword: 'New password',
      confirmPassword: 'Confirm password',
    },
    fareRuleManagement: 'Fare rule management',
    lookUpExcess: 'Look up excess baggage fees',
    agencyManagementSystem: 'Agency management system',
    agencyAccountManagement: 'Account Management',
    agencyACLTransaction: 'ACL Transaction',
    agencyManualTransaction: 'Manual Transaction Management',
    bankGuaranteeCreditLimit: 'Bank guarantee/deposit & temporary credit limit',
    reportsDashboard: 'Reports & Dashboard',
    manualTransactionReport: 'Manual Transaction Report',
    agencyControlReport: 'Agency Control Report',
    accountReceivableReport: 'Aged trial balance of account receivable report',
  },
  page: {
    profile: 'My Profile',
    404: {
      pageTitle: 'Page Not Found',
    },
    403: {
      pageTitle: 'Page Not Authorize',
    },
    500: {
      pageTitle: 'Server Error',
    },
    account: {
      _: 'Account',
      accountNumber: 'Account Number',
      orgType: 'Org. type',
      orgNo: 'Org. No',
      orgNanme: 'Org. name',
      organizationType: 'Organization Type',
      organizationNumber: 'Organization Number',
      organizationName: 'Organization name',
      orgNumberByType:(type:string) => `${type} number`,
      orgNameByType:(type:string) => `${type} name`,
      market: 'Market',
      accountBalance: 'Account Balance',
      availableCreditLimit: 'Available Credit Limit',
      bankGuaranteeDeposit: 'Bank Guarantee/Deposit',
      temporaryCreditLimit: 'Temporary Credit Limit',
      currency: 'Currency',
      IATANumber: 'IATA Number',
      paymentPeriod: 'Payment Period',
      virtualAccountNumber: 'Vitual Account',
      balanceBankGuaranteeDepositPlus: 'Balance /(Bank Guarantee + Deposit + Temporary Credit Limit)',
      aclAccountStatus: 'ACL account status',
      dueDate: 'Due Date',
      balanceToDue: 'Balance To Due',
      indueDebt: 'Indue Debt',
      overDueNday: (days: string) => `Overdue ${days} day`,
      overDueNMonth: (m: string) => `Overdue ${m} (${m} > 1) ? 'months': 'month'`,
      chooseDueDate: 'Choose Due Date',
    },
    acltrans: {
      _: 'ACL transaction',
      transactionNo: 'Transaction No',
      transactionNumber: 'Transaction Number',
      accountNo: 'Account No',
      accountNumber: 'Account Number',
      organizationNumber: 'Organization Number',
      organizationName: 'Organization name',
      transType: 'Trans type',
      transactionType: 'Transaction Type',
      status: 'Status',
      referenceDocument: 'Reference Document',
      referenceDocumentType: 'Reference Document Type',
      referenceTransactionType: 'Reference Transaction Type',
      amount: 'Amount',
      currency: 'Currency',
      transactionTime: 'Transaction Time',
      description: 'Description',
      processedBy: 'Processed by',
      manualTopup: 'Manual Topup',
      manualAdd: 'Manual Add',
      manualDeduct: 'Manual Deduct',
      reject: 'Reject',
      approve: 'Approve',
      virtualAccount: 'Virtual Account',
    },
    manualtrans: {
      _: 'Manual transaction',
      request: 'Request',
      createNewRequest: 'Create New Request',
      requestId: 'Request ID',
      accountNo: 'Account No.',
      accountNumber: 'Account Number',
      organizationNo: 'Organization No.',
      organizationNumber: 'Organization Number',
      organizationName: 'Organization name',
      amount: 'Amount',
      currency: 'Currency',
      description: 'Description',
      requestType: 'Request Type',
      status: 'Status',
      bankTransactionNumber: 'Bank Transaction Number',
      bankName: 'Bank Name',
      ACLTransactionNumber: 'ACL Transaction Number',
      receiversBankAccountNumber: "Receiver's Bank Account Number",
      receiversBankAccountName: "Receiver's Bank Account Name",
      topupType: 'Topup Type',
      manualBankTopup: 'Manual Bank Top-up',
      topupReconciliation: 'Top-up Reconciliation',
      topupReconciliationType: 'Top-up Reconciliation Type',
      user: 'User',
      agentNumber: 'Agent/CA/GSA number',
      agentName: 'Agent/CA/GSA name',
      agentStatus: 'Agent/CA/GSA status',
      transactionDate: 'Transaction Date',
      transactionType: 'Transaction Type',
    },
    bankGuarantee: {
      _: 'Bank guarantee/deposit & temporary credit limit',
      temporaryCreditLimit: 'Temporary credit limit',
      bankGuarantee: 'Bank guarantee',
      deposit: 'Deposit',
      bankGuaranteeDeposit: 'Bank guarantee/Deposit',
      bankGuaranteeDepositNumber: 'Bank guarantee/Deposit number',
      organizationStatus: 'Organization Status',
      groupAgent: 'Group Agent',
      travelAgent: 'Travel agent',
      bankGuaranteeDepositAmount: 'Bank guarantee/Deposit amount',
      type: 'Type',
      bankName: 'Bank Name',
      startDate: 'Start date',
      expireDate: 'Expiry date',
      closedDate: 'Closed date',
      note: 'Note',
      guaranteeAmount: 'Guarantee Amount',
      depositAmount: 'Deposit Amount',
    },
    category: {
      _: 'Catalogue management',
      formName: 'Create new category',
      categoryName: 'Category name',
      position: 'Position',
      creator: 'Creator',
      status: 'Status',
    },
    subAgent: {
      _: 'Sub Agent',
      subAgentNumber: 'Sub-agent Number',
      subAgentName: 'Sub-agent Name',
      phoneNumber: 'Phone Number',
    },
    subCA: {
      _: 'Sub CA',
      name: 'Sub CA name',
    },
    article: {
      _: 'Article management',
      formName: 'Create new article',
      articleTitle: 'Article Title',
      description: 'Description',
      image: 'Image',
      author: 'Author',
      interested: 'Interested',
      catagory: 'Category',
      preview: 'Preview',
      content: 'Content',
      findOut: 'Find out',
      latestNews: 'Latest News',
    },
    agent: {
      _: 'Agent',
      agentName: 'AgentName',
      subAgentName: 'Sub agent Name',
      fullName: 'FullName',
      subAgent: 'SubAgent',
      email: 'Email',
      phoneNumber: 'PhoneNumber',
      subAgentNumber: 'Sub Agent Number',
      country: 'Country',
      area: 'Area',
      timeZone: 'TimeZone',
      minLimit: 'MinimumLimit',
      maxLimit: 'MaximumLimit',
      address: 'Address',
      description: 'Description',
      iatanumber: 'IATA Number',
      zipcode: 'ZipCode',
      companyname: 'Company Name',
      status: 'Status',
      information: 'Agent Infomation',
      assignedCa: 'Assigned CA',
      agentInformation: {
        language: 'Language',
        province: 'City/Province',
        ward: 'Ward',
        district: 'District',
        businessCode: 'Business Code',
        legalRepresentation: 'Legal Representation',
        bankAccount: 'Bank Account',
        taxCode: 'Tax Code',
        position: 'Position',
        accountHolder: 'Account Holder',
        website: 'Website',
        bankName: 'Bank Name',
      },
      committedRevenue: {
        interRevenue: 'International (USD/month)',
        domRevenue: 'Domestic (VND/month)',
      },
      form: {
        agentInformation: 'Agent Information',
        registrationArea: 'Registration Area',
        committedRevenue: 'Committed Revenue',
        accountCreditLimit: 'Account Credit Limit',
      },
      subAgentInfo: 'Sub-agent Information',
      resCountry: 'Register country',
      agentNumber: 'Agent number',
      officeID: 'Office ID',
      marketID: 'Market ID',
      market: 'Market',
      maxSubAgent: 'Max Sub-Agent',
      paymentFrequency: 'Payment Frequency',
      companyName: 'Company Name',

      user: {
        subAgentName: 'Sub-agent name',
        userType: 'User Type',
        resetPass: 'Reset password',
        desResetPass:
          'Do you want to reset password of this user? An email with instructions on how to reset your password will be sent to',
      },
    },
    users: {
      _: 'User',
      formName: 'Create new account',
      shortName: 'Shortname',
      password: 'Password',
      confirmPassword: 'Confirm password',
      userName: 'Username',
      userType: 'User Type',
      appliedTo: 'Applied to',
      email: 'Email',
      phoneNumber: 'Phonenumber',
      fullName: 'Fullname',
      roles: 'Roles',
      agent: 'Agent',
      organization: 'Organization',
      organizationID: 'Org.ID',
      CA: 'Cooperate (CA)',
      none: 'None',
      iatanumber: 'IATA Number',
      requireIata: 'Iata number is required!',
      requireUsername: 'Username is required!',
      userId: 'User ID',
      nameHasSpecialCharErrMsg: 'Name do not allow special characters',
    },
    booking: {
      _: 'Booking',
      prepaidBaggage: 'Prepaid Baggage',
      bookingSuccess: 'Booking success',
      itineraryPricingError: 'Itinerary Pricing Error',
      error: {
        PNR_NOT_FOUND: 'PNR not found',
        SECURED_PNR: "We are unable to find this confirmation number. Please validate your entry and try again or contact us for further information",
        NO_ITINERARY_FOUND: "We are unable to find recommendations for your search. Please change your search criteria and resubmit the search",
      },
      step1: {
        aircraft: 'Aircraft',
        travelTime: 'Travel time',
        departureTerminal: 'Departure terminal',
        arrivalTerminal: 'Arrival terminal',
        flightLeavesTheNextDay: 'Flight leaves the next day',
        flightArrivesTheDifferentDay: 'Flight arrives the different day',
        layoverTime: 'Layover Time',
        searchFlight: 'Search flight',
        selectedFlights: 'Selected flights',
        changeSearch: 'Change search',
        flightDetails: 'Flight details',
        lookUpExcess: 'Look up excess baggage fees',
        fareType: 'Fare Type',
        published: 'Published',
        selectYourFareType: 'Select your fare type',
        negotiationPrivate: 'Negotiation / Private',
        duration: 'duration',
        filter: 'Filter',
        hideFilter: 'Hide filters',
        pricesAreInVND: 'Prices are in VND and lowest ONE WAY (per passenger).',
        selectYourFlight: ({
          location,
          flightNumber,
        }: {
          location: string | any;
          flightNumber: { current: number; total: string };
        }) => `Select your flight to ${location} - Flight ${flightNumber.current} of ${flightNumber.total}`,
        _: 'Select flight',
        roundTrip: 'Round Trip',
        oneWay: 'One Way',
        multiStop: 'Multiple destinations',
        fromPrice: 'From',
        from: 'From',
        to: 'To',
        depart: 'Depart',
        return: 'Return',
        flightClass: 'Class',
        selectCAToServe: 'Select CA to serve',
        selectPassengerCode: 'Select passenger type code',
        flight: 'Flight',
        corporateCode: 'Corporate Code',
        noFlightData: 'The date you selected has no flights or is full.',
        stops: 'stops',
        CaToServe: 'CA to serve',
        passengerTypeCode: 'Passenger type code',
        passengerTypeCodeError: 'Passenger type code is invalid because it does not apply to Children and Infant',
        psgTypeCodeOptions: {
          family: 'Visit Family and Relatives',
          student: 'Student',
          labor: 'Labor',
          seaman: 'Seaman',
          Emigrant: 'Emigrant',
          seniorCitizen: 'Senior Citizen',
          youth: 'Youth',
        },
        filterComponent: {
          departureTime: 'Departure Time',
          arrivalTime: 'Arrival Time',
          duration: 'Duration',
          numberOfStops: 'Number of Stops',
          airports: 'Airports',
          airlines: 'Airlines',
          prices: 'Prices',
        },
        passenger: 'Passenger',
        adult: 'Adult',
        atLeast12: 'From 12 years old',
        child: 'Child',
        from2To12: 'From 2 to under 12 years old',
        infant: 'Infant',
        lessThan2: 'Under 2 years old',
        editNumberPassengers: 'Edit the number of passengers',
        sizePerPackage: 'Size per piece',
        weightPerPackage: 'Weight per piece',
        upTo: 'up to',
        totalPieces: 'Total pieces',
        invalidPassengerNumver:
          'The number of passengers must not exceed 9 and the number of children or infants must not exceed the allowed quantity',
        tax: 'Tax',
        fee: 'Fee',
        total: 'Total',
        addSegment: 'Add more flight',
        flightDetail: {
          _: 'Flight details',
          aircraft: 'Aircraft',
          travelTime: 'Travel time',
          departureTerminal: 'Departure terminal',
          arrivalTerminal: 'Arrival terminal',
        },
        flightClasses: {
          Economy: 'Economy',
          'Economy Lite': 'Economy Lite',
          'Economy Super Lite': 'Economy Super Lite',
          'Economy Classic': 'Economy Classic',
          'Economy Flex': 'Economy Flex',
          'Premium Economy': 'Premium Economy',
          'Premium Economy Classic': 'Premium Economy Classic',
          'Premium Economy Flex': 'Premium Economy Flex',
          Business: 'Business',
          'Business Classic': 'Business Classic',
          'Business Flex': 'Business Flex',
          'First Class': 'First Class',
        },
        economy: {
          _: 'Economy',
          economySuperLite: 'Economy Super Lite',
          economyLite: 'Economy Lite',
          economyClassic: 'Economy Classic',
          economyFlex: 'Economy Flex',
        },
        premiumEconomy: {
          _: 'Premium Economy',
          premiumEconomyClassic: 'Premium Economy Classic',
          premiumEconomyFlex: 'Premium Economy Flex',
        },
        business: {
          _: 'Business',
          businessClassic: 'Business Classic',
          businessFlex: 'Business Flex',
        },
        firstClass: {
          _: 'First Class',
        },
        noMatchFlight: 'No matching flight',
        notFlightAvailable: 'Not flight available',
        chooseAnotherDateForThisRoute: 'Choose another date for this route',
        unPaid: 'Unpaid bookings',
        noUnPaid: 'There are no bookings',
        viewAll: 'View all',
        showLess: 'Show less',
        notfoundLocation: 'Not found the airport',
        changeLocation: 'Please change another keyword or try again',
        inputPassengerTypeCode: 'Select passenger type code',
        inputCorporateCode: 'Input corporate code',
        lookUpExcessBaggageFees: 'Look up excess baggage fees',
        confirmNewItineraryChanges: 'Confirm new itinerary changes',
        youConfirmTheNewItineraryChanges: 'you confirm the new itinerary changes',
        nonStop: 'Non stop',
        operatedBy: 'Operated by',
        class: 'Class',
        taxFeesAndCarrierChargesTitle: 'Tax, Fees and Carrier Charges',
        flightInfo: 'Flight information',
        excessBaggageChargeRate: 'Excess Baggage Charge Rate',
        selectAnAirlineToViewDetailedInformation: 'Select an airline to view detailed information',
        theDateYouSelectedHasNoFlightsOrIsFull: 'The date you selected has no flights or is full',
        assorted: 'Assorted',
        seatsLeft: 'seats left',
        seatLeft: 'seat left',
        inputAirlineName: 'Input airline name',
        invalidNumberChildren: 'Invalid number children',
        invalidNumberInfant: 'Invalid number infant',
        taxSeat: 'TAX-SEAT',
        taxBaggage: 'TAX-BAGGAGE',
      },

      step2: {
        _: 'Passenger information',
        streetAddress: 'Street address',
        placeOfBirth: 'Place of Birth',
        travelDocumentType: 'Travel Document Type',
        travelDocumentNumber: 'Travel Document Number',
        documentIssuingPlace: 'Document Issuing Place',
        detail: 'Passenger details',
        title: 'Title',
        adult: 'Adult',
        children: 'Children',
        infant: 'Infant',
        day: 'Day',
        month: 'Month',
        year: 'Year',
        firstName: 'First/Given name',
        lastName: 'Last/Family name',
        DOB: 'Date of birth (From 12 years old)',
        DOBChildren: 'Date of birth (From 2 to under 12 years old)',
        DOBInfant: 'Date of birth (Under 2 years old)',
        skipAncillaries: 'Skip ancillaries',
        piece: 'Piece',
        accompaniedBy: 'Accompanied By',
        phoneNumber: 'Phone number',
        visaNumber: 'Visa number',
        emailAddress: 'Email address',
        phoneNumber1: 'Phone number 1',
        emailAddress1: 'Email address 1',
        phoneNumber2: 'Phone number 2',
        emailAddress2: 'Email address 2',
        contactInfo: 'Contact information',
        autoNotification: 'Auto Notification',
        adultTravelling: 'Adult travelling with',
        gold: 'gold',
        million: 'MILLION MILER',
        platinum: 'platinum',
        titanium: 'titanium',
        silver: 'silver',
        tier: 'Tier',
        registration: 'Registration',
        ffp: {
          _: 'Frequent Flyer Program',
          airline: 'Airline',
          ffn: 'Frequent Flyer Number',
        },
        travelDocument: {
          _: 'Travel Document',
          title: 'Travel document (Passport is required if issuing flight tickets to/from USA)',
          type: 'Travel document type',
          number: 'Travel document number',
          issuingCountry: 'Country issue',
          region: 'Nationality',
          expiryDate: 'Expiry Date',
        },
        destinationAddress: 'Destination address (Required if issuing flight tickets to USA)',
        residentalAddress: 'Residence address (Required if issuing flight tickets to USA)',
        arrivalAddress: 'Arrival Address',
        address: {
          streetAddress: 'Street Address',
          city: 'City/Region',
          province: 'State/Province',
          zipCode: 'Zip/Postal Code',
          country: 'Country',
        },
        visaInformation: {
          _: 'Visa information (Required if issuing flight tickets to USA)',
          number: 'Visa number',
          issuingPlace: 'Place of issue',
          expiryDate: 'Expiry date',
          issueDate: 'Issue date',
          country: 'Applicable country',
          POB: 'Nationality/Region',
        },
      },
      step3: {
        _: 'Ancillary services',
        prepaidBaggage: 'Pre-paid Baggage',
        seatSelectionDesc: 'To request your seat, please click on the seat you would like on the map',
        prepaidBaggageDesc:
          'Pre-paid Baggages is a service to buy excess baggage and pay in advance to receive discount rate compared to purchase price at the airport. Prepaid baggage fees are non-refundable.',
        extraBaggage: 'Extra Baggage',
        seat: (quantity: number) => `${quantity > 1 ? 'Seats' : 'Seat'}`,
        noServiceAvailable: 'No service available',
        chooseSeats: 'Choose Seats',
        seatSelection: 'Seat Selection',
        descSeat1:
          'Seat is confirmed only until the passenger completes the payment. Seat selection fee is non-refundable. In case the passenger does not choose the seat in advance, passenger’s seat will be automatically arranged by the system within 25 hours before the flight.',
        descSeat2: 'To change the purchased seat, please contact Vietnam Airlines for assistance',
        pieces: (quantity: number) => `${quantity > 1 ? 'pieces' : 'piece'}`,
        selectFlight: 'Select flight',
        descSelectFlight: 'Select number of Pieces and their respective weight that you will be carrying.',
        CACode: 'CA Code',
        noPreference: 'No preference',
        priceSummary: 'Price Summary',
        tripTotal: 'Trip total',
        notAvailable: 'Not Available',
        available: 'Available',
        chargeable: 'Chargeable',
        filtered: 'Reserved',
        priceDetail: 'Price Details',
        exit: 'Exit',
      },
      step4: {
        _: 'Confirm',
        generalFareRule: 'General fare rule',
        freeBaggageAllow: 'Free baggage allowance',
        payNow: 'Pay now',
        payLater: 'Pay later',
        carryOnBaggage: 'Carry On Baggage',
        checkedBaggage: 'Checked Baggage',
        saveSuccess: 'Save success',
        PNRCode: 'PNR code',
        timeLimitForPayment: 'Time limit for payment',
        thisIsNoItemSelected: 'This is no item selected',
        thisIsNoSeatSelected: 'This is no item selected',
        thisIsNoBaggageSelected: 'This is no item selected',
        back: 'Back',
        bookAnother: 'Book another',
        extraBaggages: 'Extra baggages',
        seats: 'Seats',
      },
      step5: {
        _: 'Payment',
        selectPayment: 'Select Form of Payment',
        agencyCreditLimit: 'Agency Credit Limit',
        viaAmadeus: 'Via Amadeus',
        bookingSuccess: 'Booking Success',
        pnrCode: 'PNR Code',
        issueAt: 'Issue at',
        homepage: 'Homepage',
        saveSuccess: 'Save success',
        selectFormOfPayment: 'Select Form of Payment',
        itinerary: 'Itinerary',
        passengerInfo: 'Passenger Information',
        viewDetail: 'View detail',
        bookAnother: 'Book another',
        back: 'Back',
        titleReIssue: 'Success Payment but Failed to issue tickets',
        descReIssue1:
          'Unfortunately, we encountered an issue while attempting to issue your e-ticket for your upcoming flight.',
        descReIssue2: 'Please re-issue ticket!',
        descReIssue3: 'In case of unable to issue ticket, contact our support for more information and support',
        btnReIssue: 'Re-issue ticket',
      },
    },
    bookingManagement: {
      _: 'Booking Management',
      pnrCode: 'PNR Code',
      pnrHistory: 'PNR History',
      CACode: 'CA Code',
      seat: 'Seat',
      extraBaggage: 'Extra baggage',
      baggage: 'Baggage',
      getUpdateCACodeContent: (mode: 'add' | 'edit' | 'delete') =>
        `You are ${mode === 'add' ? 'adding' : mode === 'edit' ? 'changing' : 'deleting'} CA code ${mode === 'edit' ? 'from ' : ''
        }`,
      doYouWantToProceed: 'Do you want to proceed?',
      action: 'Action',
      eTicket: 'E-Ticket Number',
      viewPNR: 'View PNR',
      changeFlights: 'Change flight',
      voidTicket: 'Void ticket',
      cancelPNR: 'Cancel PNR',
      revertVoid: 'Revert Void',
      revertRefund: 'Revert Refund',
      refundsTickets: 'Refund ticket',
      PnrLengthMustBe: 'PNR code must be 6 character',
      EticketLengthMustBe: 'E-ticket code must be 14 character',
      remarkOSISK: 'Remarks, Other Service Information (OSI), Special Keyword (SK)',
      remark: 'Remarks',
      osi: 'Other Service Information (OSI)',
      airline: 'Airline',
      buyAcillary: 'Buy Ancillary',
      resendEmail: {
        _: 'Resend emails',
        notificationEmailAdded: 'Notification email added',
        noNotificationEmailAdded: 'Notification email added',
        newEmails: 'New emails',
        documentType: 'Document Type',
        reasonForIssuance: 'Reason for Issuance',
        EMDNumber: 'EMD Number',
      },
      osiTable: {
        passenger: 'Passenger',
        passengerAssociation: 'Passengers Association',
        enterOSIDetail: 'Enter OSI Detail',
        airline: 'Airline',
        detail: 'Detail',
        action: 'Action',
        OSISummary: 'Other Special Service Summary',
      },
      remarkTable: {
        passenger: 'Passenger',
        airline: 'Airline',
        detail: 'Detail',
        action: 'Action',
        segment: 'Segment',
        type: 'Type',
        category: 'Category',
        passengerAssociation: 'Passengers Association',
        segmentAssociation: 'Segment Association',
        genericRM: 'Generic (RM)',
        updateInfo: 'Update Info',
        addRemark: 'Add remark',
        timeStampAndSignature: 'Timestamp + Signature',
        remarkSummary: 'Remark summary',
        enterRemarkDetail: 'Enter Remark detail',
      },
      tsmTable: {
        ticketStatus: 'Ticket Status',
        document: 'Document',
        passenger: 'Passenger',
        service: 'Service',
        segment: 'Segment',
        details: 'Details',
        price: 'Price',
        alert: 'Alert',
        alertMessage: 'Need to calculate price',
        totalAmount: 'Total Amount',
        tsmSummary: 'TST & TSM Summary',
        tstCalculate: 'Calculate remaining TST',
        tsmCalculate: 'Calculate remaining TSM',
        tstDescription1: 'The table below contains all the TST and TSM of PNR code #',
        tstDescription2:
          'If there is any TST and TSM has not been priced yet, you need to calculate price before making payment to issue E-Ticket/EMD correspondingly',
        paymentForNotTicketed: 'Payment for the Not ticketed TST/TSM',
        selectPayment: 'Select Form of Payment',
      },
      paymentMethod: {
        agency: 'Agency',
        creditLimit: 'Credit Limit',
        eVoucher: 'eVoucher',
        electronic: '',
        card: 'Gift Card',
        gift: '',
        internationalCard: 'International',
        internationalCardSub: 'Card',
        otherPayment: 'Other',
        otherPaymentSub: 'Payment Methods',
      },
      taxFeeCharge: {
        valueTax: 'Value Add Tax',
        passengerAndBaggageSecurity: 'Passenger and Baggage Security',
        screeningServiceCharge: 'Screening Service Charge',
        passengerServiceCharge: 'Passenger Service Charge',
        systemAdminSurcharge: 'System and Admin Surcharge',
      },
      sk: 'Special Keyword (SK)',
      VIPInformation: 'VIP Information',
      deleteConfirmation: (title: string) => `You are deleting ${title}. Do you want to proceed?`,
      skTable: {
        passenger: 'Passenger',
        airline: 'Airline',
        status: 'Status',
        detail: 'Detail',
        action: 'Action',
        segment: 'Segment',
        type: 'Type',
        updateInfo: 'Update Info',
        addRemark: 'Add remark',
        passengerAssociation: 'Passengers Association',
        segmentAssociation: 'Segment Association',
        timeStampAndSignature: 'Timestamp + Signature',
        addSK: 'Add special keywords',
        enterSKDetail: 'Enter SK detail',
        SKSummary: 'Special Keyword Summary',
      },
      segment: 'Segment',
      updateInfo: 'Update info',
      passenger: 'Passenger',
      passengerInformation: 'Passenger information',
      issusReissueTicket: 'Issue/Reissue ticket',
      buyAncillaries: 'Buy ancillaries',
      notFoundPNR: 'PNR not found',
      updatePassengerInformation: 'Update passenger information',
      sendEmailAgain: 'Send email again',
      sendEmailQuestion: 'Do you want to resend email to customer?',
      newEmail: 'New email',
      inputNewEmail: 'Input new email',
      moreEmail: 'More email',
      sendEmailNote:
        'If you do not enter the new email, it will only be sent to the old email, if entered, it will send both emails.',
      voidTickets: 'Void ticket',
      changeType: 'Change type',
      selectChangeType: 'Select change type',
      reason: 'Reason',
      inputReason: 'Input reason',
      refundStep: {
        step1: 'Choose tickets & EMDs',
        step2: 'Refund Calculation & Modification',
        step3: 'Complete',
      },
      refundTicket: {
        popupWithEmd: 'Refund ticket with EMD',
        confirmQuestion: 'Are you sure to refund all tickets and EMDs?',
        totalRefundAmount: 'Total refund amount',
      },
      voidTicketOption: {
        voidTicketAndEmds: 'Void ticket & EMDs',
        voidOption: 'Void option',
        voidDescription:
          'Do you want to keep booking after all tickets are voided? If there is no valid ticket, the PNR will be deleted after a certain time due to VNA policy.',
        voidAllEmd: 'Void all tickets with EMDs',
        voidAll: 'Void all tickets without EMDs',
        voidEmd: 'Void EMDs only',
        cancelPNR: 'No, I want to cancel PNR',
        keepPNR: 'Yes, I want to keep PNR for issuing tickets',
        voidAmount: 'Void Amount',
        voidTax: 'Tax & Fees included',
        voidTicketEmdCheckMessage: 'Are you sure to void all Tickets and EMDs?',
        voidTicketCheckMessage: 'Are you sure to void all Tickets without EMDs?',
        voidEmdCheckMessage: 'Are you sure to void all Tickets without EMDs?',
        totalVoidAmount: 'Total Void Amount',
      },
      changeFlight: {
        step1: {
          _: 'Modify flight',
          changeItinerary: 'Change itinerary',
          addSegment: 'Add segment',
          cancelAndKeepOriginal: 'Cancel & keep original',
          continueToSelectFare: 'Continue to select fare',
        },
        step2: {
          _: 'Choose new flight',
        },
        step3: {
          _: 'Confirm',
        },
        step4: {
          _: 'Payment',
        },
      },
      popupMessage: {
        eticketNotFound: 'Please re-check the Ticket number',
        pnrNotFound: 'Please re-check the PNR code or try again'
      }
    },
    role: {
      _: 'Role',
      roleName: 'RoleName',
      description: 'Description',
      viewPermission: 'View Permission',
      function: 'Function',
      permissionDes: 'Permission description',
      permission: 'Permission',
      userType: 'Applied to',
      userRole: 'Manage type',
      admin: 'Admin',
      user: 'User',
      create: 'Create',
      edit: 'Edit',
      view: 'View',
      delete: 'Delete',
      approve: 'Approve',
      // report: "Report",
      // reportAgent: "Report agent",
      // booking: "Booking",
      // changeFlights: "Change flights",
      // addCACode: "Add CA code",
      // addonService: "Add-on service"
    },
    permission: {},
    news: {
      _: 'Tin tức',
      title: 'Tiêu đề',
      description: 'Mô tả',
      thumbnail: 'Ảnh bìa',
      content: 'Nội dung',
      category: 'Category',
      startDate: 'Ngày bắt đầu',
      endDate: 'Ngày kết thúc',
      agentViewRule: 'Agent view rule',
      caViewRule: 'CA view rule',
      gsaViewRule: 'GSA view rule',
      assignedUsers: 'Người dùng chỉ định'
    },
    CA: {
      _: 'CA',
      country: 'Country',
      email: 'Email',
      phoneNumber: 'PhoneNumber',
      timeZone: 'TimeZone',
      caInfo: 'CA Information',
      caUserAdmin: 'CA Admin User',
      subCA: 'Sub CA',
      subCAInfo: 'Sub CA Information',
      subCANumber: 'Sub CA Number',
      activeMarket: 'Active Market Assignment',
      subCAName: 'Sub-CA Name',
      organization: 'Organization',
      type: 'CA Type',
      address: 'Address',
      marketAssign: 'Market Assignment',
      agentAssign: 'Assigning Agent',
      startDate: 'Start date',
      endDate: 'End date',
      messageDuplicatorTimeMarket: 'Market assignment already exits in your selected period',
      messageDuplicatorTimeAgent: 'Agent assignment already exits in your selected period',
      form: {
        booking: 'Booking',
        selfServiceCA: 'CA Self-service',
        caToBeServedByAgent: 'CA to be served by agent',
        noSelfBooking: 'No self booking',
        corporateInformation: 'Corporate Information',
        legalRepresentation: 'Legal Representation',
        registration: 'Registration',
        registrationArea: 'Registration Area',
        committedRevenue: 'Committed Revenue',
        agentRegistration: 'Agent Registration',
      },
      corporateInformation: {
        vnCAName: 'Vietnamese CAName',
        enCAName: 'English CAName',
        language: 'Language',
        agentName: 'Agent Name',
        province: 'Province',
        zipcode: 'ZipCode',
        ward: 'Ward',
        district: 'District',
        address: 'Address',
        abbreviatedName: 'Abbreviated Name',
        businessCode: 'Business Code',
        bankAccount: 'Bank Account',
        taxCode: 'Tax Code',
        issueDate: 'Issue Date',
        issueBy: 'Issue By',
        accountHolder: 'Account Holder',
        website: 'Website',
        bankName: 'Bank Name',
      },
      legalRepresentation: {
        fullName: 'Fullname',
        typeOfIdentityDocument: 'Type of identity document',
        regPosition: 'Registering Position',
      },
      registration: {
        interRevenue: 'International (USD/month)',
        domRevenue: 'Domestic (VND/month)',
        agentID: 'Agent ID',
      },
      canumber: 'CA Number',
      name: 'CA Name',
      officeID: 'Office ID',
      cacode: 'CA Code',
      companyName: 'Company Name',
      iatanumber: 'IATA Number',
      market: 'Market',
      paymentFrequency: {
        _: 'Payment Frequency',
        three: '3 months',
        six: '6 months',
        twelve: '12 months',
      },
    },
    GSA: {
      _: 'GSA',
      gsaNumber: 'GSA Number',
      gsaName: 'GSA Name',
      email: 'Email',
      phoneNumber: 'PhoneNumber',
      officeID: 'Office ID',
      country: 'Country',
      province: 'City/Province',
      address: 'Address',
      iatanumber: 'IATA Number',
      zipcode: 'ZipCode',
      timeZone: 'TimeZone',
      language: 'Language',
      companyname: 'Company Name',
      status: 'Status',
    },
    serviceInfo: {
      _: 'Service Information',
      formOfPayment: 'Form of Payment',
      docApply: 'Document apply',
    },
    addons: {
      _: '',
      autoNotificationInformation: 'Auto Notification Information',
      contactInformation: 'Contact Information',
      eTicketNumber: 'E-Ticket Number',
      pnrCode: 'PNR Code',
      servingCA: 'Serving CA',
      itinerary: 'Itinerary',
      passengerInfo: 'Passenger Information',
      reserved: 'Reserved',
      issued: 'Issued',
      flightInfo: 'Flight information',
      departing: 'Departing',
      returning: 'Returning',
      adult: 'Adult',
      child: 'Child',
      infant: 'Infant',
      tax: 'Tax',
      fee: 'Fee',
      total: 'Total',
      viewDetails: 'View Details',
      pnrIssueDate: 'PNR issued at',
      ticketIssueDate: 'Ticket issued at',
      successUpdate: 'Update Successfully',
      successPayment: 'Payment Successfully',
      emdCode: 'EMD Code',
      home: 'Homepage',
      travelDocument: 'Travel Document',
      visaInformation: 'Visa Information',
      arrivalAddress: 'Arrival Address',

      menu: {
        buyExtraBaggage: 'Buy extra baggage',
        chooseSeat: 'Choose seat',
        ticketUpgrade: 'Ticket upgrade',
        specialService: 'Special service',
      },

      flightDetail: {
        _: 'Flight details',
        aircraft: 'Aircraft',
        travelTime: 'Travel time',
        departureTerminal: 'Departure terminal',
        arrivalTerminal: 'Arrival terminal',
      },

      passengerInformation: {
        _: 'Pasenger Information',
        DOB: 'Date of Birth',
        accompaniedBy: 'Accompanied By',
        travelDocument: {
          _: 'Travel Document',
          type: 'Travel document type',
          number: 'Travel document number',
          issuingCountry: 'Document Issuing Country',
          region: 'Region',
          expiryDate: 'Expiry Date',
        },
        residentalAddress: 'Residential Address',
        arrivalAddress: 'Arrival Address',
        address: {
          streetAddress: 'Street Address',
          city: 'City',
          province: 'Province',
          zipCode: 'Postal Code',
          country: 'Country',
        },
        visaInformation: {
          _: 'Visa Information',
          number: 'Visa number',
          issuingPlace: 'Issuing place',
          expiryDate: 'Expiry date',
          region: 'Region',
          POB: 'Place of birth',
        },
      },
      buyExtraPackage: {
        chooseFlight: 'Choose flight',
        description: 'Buy extra baggage to your flight.',
        package: 'Package',
        totalSize: 'Total Size',
        bookedBaggage: 'Booked Baggage',
        extraBaggage: 'Extra Baggage',
        successNote: 'Baggage update is successful, flight information will be sent to your email.',
      },
      chooseSeat: {
        seatIsAvailable: 'Seat is Available',
        seatOccupation: 'Seat occupation',
        selectSeat: 'Seat Selection',
        description: 'Select your seats from the seat map.',
        seat: 'Seat',
        unavaliableSeat: 'Unavailable Seat',
        avaliableSeat: 'Available Seat',
        emergencyExit: 'Emergency Exit',
        successNote: 'Seat update is successful, flight information will be sent to your email.',
      },
      ticketUpgrade: {
        chooseClass: 'Choose class',
        description: 'Upgrade your booking class.',
        ticket: 'Ticket',
        upgradeTo: 'Upgrade to',
        economyClassic: 'Economy Classic',
        businessClassic: 'Business Classic',
        businessFlex: 'Business Flex',
        successNote: 'Upgrade ticket is successful, flight information will be sent to your email.',
      },
      specialService: {
        chooseService: 'Choose special service',
        description: 'Add special services to your flight.',
        specialMeals: 'Special Meals',
        bassinetService: 'Bassinet Service',
        wheelchair: 'Passenger requiring wheelchair',
        blindPass: 'Blind passenger service',
        deafPass: 'Deaf passenger service',
        specialBaggage: 'Special baggage service',
        extraSeat: 'Extra seat',
        oxygen: 'Passenger requiring oxygen service',
        stretcher: 'Passenger requiring stretcher',
        pregnant: 'Pregnant passenger',
        bassinetInfant: 'Bassinet for infant',
        meetAndGreet: 'Meet and greet passenger',
        animalDisable: 'Service animal accompanying disabilities',
        medicalClearance: 'Passenger requiring medical clearance',
        successNote: 'Special service update is successful, flight information will be sent to your email.',
      },
      payment: {
        paymentMethod: 'Choose method of payment',
        creditLimitAccount: 'Credit Limit Account',
        viaAmadeus: 'Via Amadeus',
      },
    },
    point: {
      _: 'Points',
      eTicketNumber: 'E-Ticket Number',
      pnrCode: 'PNR Code',
      servingCA: 'Serving CA',
      itinerary: 'Itinerary',
      passengerInfo: 'Passenger Information',
      reserved: 'Reserved',
      issued: 'Issued',
      flightInfo: 'Flight information',
      departing: 'Departing',
      returning: 'Returning',
      adult: 'Adult',
      child: 'Child',
      infant: 'Infant',
      tax: 'Tax',
      fee: 'Fee',
      total: 'Total',
      viewDetails: 'View Details',
      pnrIssueDate: 'PNR issued at',
      ticketIssueDate: 'Ticket issued at',
      successUpdate: 'Update Successfully',
      successPayment: 'Payment Successfully',
      emdCode: 'EMD Code',
      home: 'Homepage',
      menu: {
        bookingTicket: 'Booking ticket',
        buyExtraBaggage: 'Buy extra baggage',
        chooseSeat: 'Choose seat',
        ticketUpgrade: 'Ticket upgrade',
        businessLounge: 'Business lounge',
        offerIncentive: 'Offer incentive',
      },
      flightDetail: {
        _: 'Flight details',
        aircraft: 'Aircraft',
        travelTime: 'Travel time',
        departureTerminal: 'Departure terminal',
        arrivalTerminal: 'Arrival terminal',
      },

      passengerInformation: {
        _: 'Pasenger Information',
        title: 'Title',
        firstName: 'First Name',
        lastName: 'Last Name',
        DOB: 'Date of Birth',
        accompaniedBy: 'Accompanied By',
        phoneNumber: 'Phone number',
        ffp: {
          _: 'Frequent Flyer Program',
          airline: 'Airline',
          ffn: 'Frequent Flyer Number',
        },
        travelDocument: {
          _: 'Travel Document',
          type: 'Travel document type',
          number: 'Travel document number',
          issuingCountry: 'Document Issuing Country',
          region: 'Region',
          expiryDate: 'Expiry Date',
        },
        residentalAddress: 'Residential Address',
        arrivalAddress: 'Arrival Address',
        address: {
          streetAddress: 'Street Address',
          city: 'City',
          province: 'Province',
          zipCode: 'Postal Code',
          country: 'Country',
        },
        visaInformation: {
          _: 'Visa Information',
          number: 'Visa number',
          issuingPlace: 'Issuing place',
          expiryDate: 'Expiry date',
          region: 'Region',
          POB: 'Place of birth',
        },
      },
      bookingTicket: {
        selectFlight: {
          _: 'Select flight',
          roundTrip: 'Round Trip',
          oneWay: 'One Way',
          multipleDes: 'Multiple Destinations',
          passenger: 'Passenger',
          economy: {
            _: 'Economy',
            economySuperLite: 'Economy Super Lite',
            economyLite: 'Economy Lite',
            economyClassic: 'Economy Classic',
            economyFlex: 'Economy Flex',
          },
          business: {
            _: 'Business',
            businessClassic: 'Business Classic',
            businessFlex: 'Business Flex',
          },
        },
        // passengerInfo: {
        //     _: "Passenger information",
        //     DOB: "Date of Birth",
        //     accompaniedBy: "Accompanied By",
        //     travelDocument: {
        //         _: "Travel Document",
        //         type: "Travel document type",
        //         number: "Travel document number",
        //         issuingCountry: "Document Issuing Country",
        //         region: "Region",
        //         expiryDate: "Expiry Date",
        //     },
        //     residentalAddress: "Residential Address",
        //     arrivalAddress: "Arrival Address",
        //     address: {
        //         streetAddress: "Street Address",
        //         city: "City",
        //         province: "Province",
        //         zipCode: "Postal Code",
        //         country: "Country"
        //     },
        //     visaInformation: {
        //         _: "Visa Information",
        //         number: "Visa number",
        //         issuingPlace: "Issuing place",
        //         expiryDate: "Expiry date",
        //         region: "Region",
        //         POB: "Place of birth"
        //     }
        // },
        confirm: {
          _: 'Confirm',
          generalFareRule: 'General fare rule',
          freeBaggageAllow: 'Free baggage allowance',
        },
        payment: {
          _: 'Payment',
          paymentMethod: 'Choose method of payment',
          creditLimitAccount: 'Credit Limit Account',
          viaAmadeus: 'Via Amadeus',
        },
        successMessage: 'Booking ticket successful',
        pnrCode: 'PNR Code',
      },
      buyExtraPackage: {
        package: 'Package',
        totalSize: 'Total Size',
        bookedBaggage: 'Booked Baggage',
        extraBaggage: 'Extra Baggage',
        successNote: 'Baggage update is successful, flight information will be sent to your email.',
      },
      chooseSeat: {
        selectSeat: 'Seat Selection',
        seat: 'Seat',
        unavaliableSeat: 'Unavailable Seat',
        avaliableSeat: 'Available Seat',
        emergencyExit: 'Emergency Exit',
        successNote: 'Upgrade ticket is successful, flight information will be sent to your email.',
      },
      ticketUpgrade: {
        chooseClass: 'Choose class',
        ticket: 'Ticket',
        upgradeTo: 'Upgrade to',
        economyClassic: 'Economy Classic',
        businessClassic: 'Business Classic',
        businessFlex: 'Business Flex',
        successNote: 'Upgrade ticket is successful, flight information will be sent to your email.',
      },
      businessLounge: {
        _: 'Business lounge',
      },
      offerIncentive: {
        offerCode: 'Offer Code',
        request: 'Request',
        createReq: 'Create request',
        viewReq: 'Xem yêu cầu',
        editReq: 'Sửa yêu cầu',
        deleteReq: 'Xóa yêu cầu',
        addReq: 'Add request',
        reqType: 'Request type',
        subject: 'Subject',
        fullName: 'Full name',
        phoneNumber: 'Phone number',
        lotusmilesCardNo: "Lotusmiles's card number",
        ticketNumber: 'Ticket number',
        flight: 'Flight',
        departure: 'Departure',
        time: 'Time',
        note: 'Note',
        addMoreFlight: 'Add more flight',
        addPassenger: 'Add passenger',
        type: {
          tickets: {
            _: 'Tickets',
            ticketInfo: 'Ticket information',
            serviceClass: 'Service class',
            bookingClass: 'Booking class',
          },
          changeTickets: {
            _: 'Change tickets',
            newTicketInfo: 'New ticket information',
            oldTicket: 'Old ticket number',
            newFlight: 'New flight',
            newDeparture: 'New departure',
            newTime: 'New time',
          },
          upgradeTickets: {
            _: 'Upgrade tickets',
            upgradeTicketInfo: 'Upgrade ticket information',
            upgradeType: 'Upgrade type',
            newBookingClass: 'New booking class',
          },
          extraBaggage: {
            _: 'Extra baggage',
            extraBaggageInfo: 'Extra baggage information',
            qualityOfPackage: 'qualityOfPackage',
          },
          lotus: {
            _: 'Lotusmiles',
            lotusmilesInfo: 'Lotusmiles information',
            newCardClass: 'New card class',
          },
          businessLounge: {
            _: 'Business Lounge',
            businessLoungeInfo: 'Business lounge information',
          },
          others: {
            _: 'Others',
            otherReq: 'Other request',
          },
        },
      },
    },
    marketManagement: {
      _: 'Market Management',
      marketName: 'Market Name',
      currency: 'Currency',
      description: 'Description',
      status: 'Status',
    },
    auth: {
      forgotPass: 'Forgot password',
      descForgotPass:
        'Enter your username or email address and we will send you instructions on how to create a new password.',
      emailMe: 'Email me',
      resetPass: 'Reset password',
      desResetPass:
        'This is the first time you have logged into Travel Agent Portal. Please change your password to protect your account before using the system!',
      newPass: 'New password',
      change: 'Change',
      changeYourPass: 'Change your password',
      changePassSuccess: 'Change password successfully',
      changePassFail: 'Change password fail',
      createPassSuccess: 'Create password successfully',
      createPassFail: 'Create password fail',
      loginFail: 'Login fail',
      loginSuccess: 'Login successfully',
      logoutFail: 'Logout fail, try again',
      createPass: 'Create your password',
      desCreatePass:
        'This is the first time you have logged into Travel Agent Portal. Please create your password to login for the next time before using the system!',
    },
    login: {
      _: 'Login',
      userName: 'Username',
      pass: 'Password',
      remember: 'Remember',
      forgotPass: 'Forgot password?',
      captcha: 'Type the word above',
      incorrectCaptcha: 'Incorrect captcha',
      submit: 'Submit',
      copyright: 'Copyright',
      description:
        "Being a dynamic, modern international airline with Vietnam's cultural identity, for more than 20 years of development with double-digit growth, Vietnam Airlines has been leading the Vietnam aviation market - one of the world's fastest-growing domestic markets. As a widely known modern airline brand name with a unique culture, Vietnam Airlines aims to become a leading 5-star international airline in Asia.",
      messageLoginFail: 'Accounts that have been locked need to contact the administrator to reset the password.',
    },
    fareRule: {
      _: 'Fare rule',
      fareRuleName: 'Fare rule name',
      language: 'Language',
      applicableFlight: 'Applicable flight',
      dataType: 'Data type',
      content: 'Content',
      chooseValue: 'Choose value',
      note: 'Notes',
      inputNotes: 'Input notes',
      langError: 'Please fill in both languages',
      domesticFareRules: 'Domestic Fare Rules',
      internationalFareRules: 'International Fare Rules',
      selectionOptions: {
        'Free of charge': 'Free of charge',
        'Not allow': 'Not allow',
        Chargeable: 'Chargeable',
      },
      economy: {
        _: 'Economy',
        superLite: 'Economy Super Lite',
        lite: 'Economy Lite',
        classic: 'Economy Classic',
        flex: 'Economy Flex',
      },
      premiumEconomy: {
        _: 'Premium Economy',
        classic: 'Premium economy classic',
        flex: 'Premium economy flex',
      },
      business: {
        _: 'Business',
        classic: 'Business classic',
        flex: 'Business flex',
      },
      firstClass: {
        _: 'First class',
      },
    },
  },
};
export default EnglishScript;
